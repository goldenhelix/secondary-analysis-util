name: Compress and Index Genomic Files
description: Compress, index, and validate genomic files (VCF, BAM, CRAM, BED, etc.)
auto_generate_session_for_account: "{workspaceBot}"

agent_requirements:
  cpu_cores: 4
  memory_gb: 8

parameters:
  - name: input_directory
    type: directory
    label: Input Directory
    help: Directory containing genomic files to compress and index
    supports_location_mode: 'no_append'
    
  - name: compress_vcf
    type: boolean
    label: Compress and index VCFs
    value: "true"
    help: Choose whether to compress and index VCFs
    
  - name: compress_bam
    type: boolean
    label: Compress and index BAMs
    value: "true"
    help: Choose whether to compress and index BAMs
    
  - name: compress_cram
    type: boolean
    label: Compress and index CRAMs
    value: "true"
    help: Choose whether to compress and index CRAMs
    
  - name: compress_bed
    type: boolean
    label: Compress and index BEDs
    value: "true"
    help: Choose whether to compress and index BEDs
    
  - name: remove_uncompressed
    type: boolean
    label: Remove Uncompressed Files
    value: "true"
    help: Choose whether to remove uncompressed files after compression and indexing

  - name: index_files
    type: boolean
    label: Index Files
    value: "true"
    help: Choose whether to index files after compression
    group: Advanced Options

  - name: search_subdirectories
    type: boolean
    label: Search Subdirectories
    value: "true"
    help: Choose whether to search subdirectories for genomic files
    group: Advanced Options

  - name: search_pattern
    type: string
    label: Search Pattern
    value: ""
    help: Pattern to search for genomic files (e.g., sample_name*). Only used if non-empty.
    optional: true
    group: Advanced Options

steps:
  - name: compress_and_index
    description: Compress and index genomic files
    type: cmd
    docker:
      image: registry.goldenhelix.com/public/sentieon:202503
    args:
      - |-
        set -euo pipefail

        # Set up scratch space
        cd /scratch

        # Function to compress and index a file
        compress_and_index_vcf() {
        
          # Collect inputs to function
          local file=$1
          local index=$2
          local remove_uncompressed=$3
          local file_type=${file##*.}  # Get file extension, used to clean up file name

          # Copy file to scratch space (since we support no-append)
          cp "$file" .
          local file_name=$(basename "$file")

          # Check if file is already compressed
          # Case 1: File is uncompressed
          # Case 2: File is compressed with bgzip
          # Case 3: File is compressed with something else

          # Check if file is already compressed with bgzip
          if tabix -f "$file_name" > /dev/null 2>&1; then
            echo "File $file_name is already compressed with bgzip"
            rm "${file_name}.tbi"
            if [[ "$file_type" != "gz" ]]; then
              mv "$file_name" "$file_name.gz"
            fi
          elif gzip -t "$file_name" > /dev/null 2>&1; then
            echo "File $file_name is compressed with gzip; decompressing and recompressing with bgzip..."
            # Decompress with gunzip and recompress with bgzip
            gunzip -c "$file_name" | bgzip -c > "$file_name"
            rm "$file_name"
            file_name="$file_name.gz"
          else
            echo "File $file_name is not compressed; compressing..."
            bgzip -c "$file_name" > "$file_name.gz" || { echo "Failed to compress file $file_name, skipping..."; return 1; }
            rm "$file_name"
            file_name="$file_name.gz"
          fi

          # Index file
          if [[ "$index" == "true" ]]; then
            tabix -f "$file_name"
          fi

          # Remove uncompressed file if requested
          if [[ "$remove_uncompressed" == "true" ]]; then
            rm "$file"
          fi

          # Copy file back to input directory
          cp "$file_name" "$(dirname "$file")"

        }

        # Determine whether to search subdirectories or not
        if [[ "$search_subdirectories" == "true" ]]; then
          search_subdirectories=""
        else
          search_subdirectories="-maxdepth 1"
        fi

        # Search for VCFs
        if [[ "$compress_vcf" == "true" ]]; then
          find "$input_directory" -type f -name "${search_pattern}*vcf*" ${search_subdirectories} | \
          while read -r file; do
            echo "Compressing and indexing VCF: $file"
            compress_and_index_vcf "$file" "$index_files" "$remove_uncompressed"
          done
        fi